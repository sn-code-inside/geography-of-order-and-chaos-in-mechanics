%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 91 -12 412 200
%%HiResBoundingBox: 91.5625 3.1875 411.563 200.875
%%Creator: (Mathematica 4.0 for Microsoft Windows)
%%CreationDate: (Thursday, April 1, 2010) (11:57:23)
%%Title: Clipboard
%%DocumentNeededResources: font Courier
%%DocumentSuppliedResources:
%%DocumentNeededFonts: Courier
%%DocumentSuppliedFonts:
%%DocumentFonts: Courier
%%EndComments
/MISOfy
{
    /newfontname exch def
    /oldfontname exch def

    oldfontname findfont
    dup length dict begin
        {1 index /FID ne {def} {pop pop} ifelse} forall
        /Encoding ISOLatin1Encoding def
        currentdict
    end

    newfontname exch definefont pop
} def

0 204.063 translate 1 -1 scale
gsave
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
 	     Momatrix
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        9 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        11 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
	      /Momatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {
	0 0 moveto
	false charpath
	flattenpath
	pathbbox
	newpath
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
	Mwidth
	Mheight
	Mlp
	translate
	scale
	/yscale exch def
	/ybias exch def
	/xscale exch def
	/xbias exch def
	/Momatrix
	xscale yscale matrix scale
	xbias ybias matrix translate
	matrix concatmatrix def
	/Mgmatrix
	matrix currentmatrix
	def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabsproc {
        0
        matrix defaultmatrix
        dtransform idtransform
        dup mul exch
        dup mul
        add sqrt
} bind def
/Mabswid {
        Mabsproc
        setlinewidth
} bind def
/Mabsdash {
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def

/MFill {
	0 0 		moveto
	Mwidth 0 	lineto
	Mwidth Mheight 	lineto
	0 Mheight 	lineto
	fill
} bind def

/MPlotRegion {
	3 index
	Mwidth mul
	2 index
	Mheight mul
	translate
	exch sub
	Mheight mul
	/Mheight
	exch def
	exch sub
	Mwidth mul
	/Mwidth
	exch def
} bind def

/Mcharproc
{
  	currentfile
  	(x)
  	readhexstring
  	pop
  	0 get
  	exch
 	div
} bind def

/Mshadeproc
{
	dup
	3 1
	roll
	{
	dup
	Mcharproc
	3 1
	roll
	} repeat
	1 eq
	{
	setgray
	}
	{
	3 eq
	{
	setrgbcolor
	}
	{
	setcmykcolor
	} ifelse
	} ifelse
} bind def

/Mrectproc
{
	3 index
	2 index
	moveto
	2 index
	3 -1
	roll
	lineto
	dup
	3 1
	roll
	lineto
	lineto
	fill
} bind def

/_Mcolorimage
{
	7 1
	roll
	pop
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	9 index
	Mshadeproc
	Mrectproc
	} for
	pop
	} for
	pop pop pop pop
} bind def

/_Mimage
{
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub 
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	Mcharproc
	setgray
	Mrectproc
	} for
	pop
	} for
	pop pop pop
} bind def

/Mimage {
	4 index
	4 index
	mul 1600 gt
	{ image }
	{ _Mimage }
	ifelse
} def

/Mcolorimage {
	6 index
	6 index
	mul 1600 gt
	{ colorimage }
	{ _Mcolorimage }
	ifelse
} def
/Mnodistort false def
1.000000 1.000000 scale
91.562500 200.875000 translate
1.000000 -1.000000 scale
0.000000 0.000000 translate
/Mleft		0.000000 def
/Mbottom	0.000000 def
/Mwidth		320.000000 def
/Mheight	197.687500 def
0 setgray
0 setlinewidth
/Courier findfont 12 scalefont setfont
/Mfontsize 12 def
/Plain /Courier findfont def

%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.31746 0.0300264 0.573294 [
[.02381 .01753 -12 -9 ]
[.02381 .01753 12 0 ]
[.18254 .01753 -6 -9 ]
[.18254 .01753 6 0 ]
[.34127 .01753 -12 -9 ]
[.34127 .01753 12 0 ]
[.65873 .01753 -9 -9 ]
[.65873 .01753 9 0 ]
[.81746 .01753 -3 -9 ]
[.81746 .01753 3 0 ]
[.97619 .01753 -9 -9 ]
[.97619 .01753 9 0 ]
[.4875 .14469 -18 -4.5 ]
[.4875 .14469 0 4.5 ]
[.4875 .25934 -18 -4.5 ]
[.4875 .25934 0 4.5 ]
[.4875 .374 -18 -4.5 ]
[.4875 .374 0 4.5 ]
[.4875 .48866 -18 -4.5 ]
[.4875 .48866 0 4.5 ]
[.4875 .60332 -6 -4.5 ]
[.4875 .60332 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
.02381 .03003 m
.02381 .03628 L
s
[(-1.5)] .02381 .01753 0 1 Mshowa
.18254 .03003 m
.18254 .03628 L
s
[(-1)] .18254 .01753 0 1 Mshowa
.34127 .03003 m
.34127 .03628 L
s
[(-0.5)] .34127 .01753 0 1 Mshowa
.65873 .03003 m
.65873 .03628 L
s
[(0.5)] .65873 .01753 0 1 Mshowa
.81746 .03003 m
.81746 .03628 L
s
[(1)] .81746 .01753 0 1 Mshowa
.97619 .03003 m
.97619 .03628 L
s
[(1.5)] .97619 .01753 0 1 Mshowa
.125 Mabswid
.05556 .03003 m
.05556 .03378 L
s
.0873 .03003 m
.0873 .03378 L
s
.11905 .03003 m
.11905 .03378 L
s
.15079 .03003 m
.15079 .03378 L
s
.21429 .03003 m
.21429 .03378 L
s
.24603 .03003 m
.24603 .03378 L
s
.27778 .03003 m
.27778 .03378 L
s
.30952 .03003 m
.30952 .03378 L
s
.37302 .03003 m
.37302 .03378 L
s
.40476 .03003 m
.40476 .03378 L
s
.43651 .03003 m
.43651 .03378 L
s
.46825 .03003 m
.46825 .03378 L
s
.53175 .03003 m
.53175 .03378 L
s
.56349 .03003 m
.56349 .03378 L
s
.59524 .03003 m
.59524 .03378 L
s
.62698 .03003 m
.62698 .03378 L
s
.69048 .03003 m
.69048 .03378 L
s
.72222 .03003 m
.72222 .03378 L
s
.75397 .03003 m
.75397 .03378 L
s
.78571 .03003 m
.78571 .03378 L
s
.84921 .03003 m
.84921 .03378 L
s
.88095 .03003 m
.88095 .03378 L
s
.9127 .03003 m
.9127 .03378 L
s
.94444 .03003 m
.94444 .03378 L
s
.25 Mabswid
0 .03003 m
1 .03003 L
s
.5 .14469 m
.50625 .14469 L
s
[(0.2)] .4875 .14469 1 0 Mshowa
.5 .25934 m
.50625 .25934 L
s
[(0.4)] .4875 .25934 1 0 Mshowa
.5 .374 m
.50625 .374 L
s
[(0.6)] .4875 .374 1 0 Mshowa
.5 .48866 m
.50625 .48866 L
s
[(0.8)] .4875 .48866 1 0 Mshowa
.5 .60332 m
.50625 .60332 L
s
[(1)] .4875 .60332 1 0 Mshowa
.125 Mabswid
.5 .05869 m
.50375 .05869 L
s
.5 .08736 m
.50375 .08736 L
s
.5 .11602 m
.50375 .11602 L
s
.5 .17335 m
.50375 .17335 L
s
.5 .20201 m
.50375 .20201 L
s
.5 .23068 m
.50375 .23068 L
s
.5 .28801 m
.50375 .28801 L
s
.5 .31667 m
.50375 .31667 L
s
.5 .34534 m
.50375 .34534 L
s
.5 .40267 m
.50375 .40267 L
s
.5 .43133 m
.50375 .43133 L
s
.5 .46 m
.50375 .46 L
s
.5 .51733 m
.50375 .51733 L
s
.5 .54599 m
.50375 .54599 L
s
.5 .57466 m
.50375 .57466 L
s
.5 .00136 m
.50375 .00136 L
s
.25 Mabswid
.5 0 m
.5 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
.5 Mabswid
.02381 .03003 m
.06244 .02308 L
.08255 .01926 L
.0932 .01749 L
.09905 .01664 L
.10458 .01596 L
.10972 .01544 L
.11243 .01522 L
.11531 .01502 L
.11772 .01489 L
.119 .01484 L
.12038 .01479 L
.12164 .01475 L
.1228 .01473 L
.12396 .01472 L
.12507 .01472 L
.12627 .01472 L
.12736 .01473 L
.12861 .01476 L
.1298 .01479 L
.1309 .01483 L
.13191 .01488 L
.13419 .01501 L
.1365 .01519 L
.13903 .01543 L
.14415 .0161 L
.14939 .01703 L
.15436 .01817 L
.16366 .02102 L
.17368 .02523 L
.18458 .03128 L
.20435 .04663 L
.22536 .06968 L
.24483 .09762 L
.26311 .12963 L
.3018 .21405 L
.34294 .32119 L
.38256 .42744 L
.42067 .51672 L
.44028 .55286 L
.45118 .56919 L
.46123 .5816 L
.47147 .59148 L
.47687 .59551 L
.48258 .59888 L
.48497 .60001 L
.48753 .60104 L
.48975 .60178 L
.49217 .60242 L
.49364 .60273 L
Mistroke
.495 .60295 L
.4963 .60312 L
.49703 .60319 L
.49769 .60324 L
.49894 .6033 L
.49964 .60332 L
.50028 .60332 L
.50147 .60329 L
.50273 .60321 L
.50395 .60309 L
.50528 .60291 L
.5077 .60245 L
.51006 .60184 L
.51223 .60113 L
.51717 .59901 L
.5224 .59599 L
.53113 .58924 L
.54075 .57936 L
.56014 .55218 L
.58101 .51327 L
.6222 .41507 L
.66188 .30817 L
.70004 .20961 L
.74065 .1226 L
.75942 .09098 L
.77975 .06341 L
.79088 .05123 L
.80113 .04178 L
.81156 .03383 L
.8213 .02782 L
.83037 .02338 L
.8401 .01975 L
.84564 .01817 L
.8509 .01698 L
.85562 .01614 L
.85809 .01578 L
.86075 .01546 L
.86327 .01521 L
.86559 .01503 L
.8678 .01489 L
.86902 .01484 L
.87014 .01479 L
.87137 .01476 L
.87205 .01474 L
.8727 .01473 L
.87384 .01472 L
.87508 .01472 L
.87574 .01472 L
.87645 .01472 L
.8772 .01473 L
Mistroke
.8779 .01474 L
.87915 .01477 L
.8805 .01482 L
.88319 .01494 L
.88613 .01511 L
.89147 .01555 L
.89667 .0161 L
.9015 .01672 L
.94065 .02369 L
.97619 .03003 L
Mfstroke
% End of Graphics
MathPictureEnd

%%PSTrailer
end
grestore

%%Trailer
%%EOF
